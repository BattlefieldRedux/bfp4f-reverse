1. "Image1": if you compare the exe to the classes seen in the leaked blaze server you can roughly find functions in the same order
   -getClassName helps to identify in which class one is and where the functions for the vmt are located 
2. "Image2": I create "ReverseDB" tool to make it easier to share new found function offsets, and also generate ida scripts, that rename the function in someone elses ida db (for sharing and updating)
3. for each component&command combo there exist a so called "TagInfoMap", essentially a definition of the structure of the expected payload and a way to easier access it via code (like in xml traveling nodes instead of raw data) or a "visit" function (not so sure about that, I guess for creation)
   -here you can see f.e. the combo "Util"(component) and "PreAuthResponse"(command) is created, notice how the taglabels are already encoded in 3 bytes, if you search by them you can easily find where packets are created as you see them in request packets
4. every combo has such taginfomap and a member function in its vmt, you just need to follow the xrefs and follow the right entry (see image 6)
5. "Image5": this is an example TagInfoMap I found out how to "read" it, maybe someone can make an algorithm out of them
Example:

TdfMap data:
00 EE EB 86  0E 0C 09 01 00 00 00 00             //0x86ebee = "ANON"
00 A3 3C 87  04 10 E4 00 61 93 F3 00 41 00 00 00 //0x873ca3 = "ASRC"
00 33 99 8E  01 08 2C 00                         //0x8e9933 = "CIDS"
00 EE E9 8E  04 10 18 01 61 93 F3 00 41 00 00 00 //0x8ee9ee = "CNGN"
00 A6 FB 8E  0A 0C 48 00 00 00 00 00             //0x8efba6 = "CONF"
00 F4 EC A6  04 10 20 00 61 93 F3 00 01 01 00 00 //0xa6ecf4 = "INST"
00 B2 9B B6  0E 0C 08 01 00 00 00 00             //0xb69bb2 = "MINR"
00 F0 1C BA  04 10 D8 00 61 93 F3 00 21 00 00 00 //0xba1cf0 = "NASP"
00 24 9B C2  04 10 FC 00 61 93 F3 00 41 00 00 00 //0xc29b24 = "PILD"
00 74 C8 C2  04 10 14 00 61 93 F3 00 01 01 00 00 //0xc2c874 = "PLAT"
00 67 48 C3  04 10 0C 01 61 93 F3 00 41 00 00 00 //0xc34867 = "PTAG"
00 F3 FC C6  0A 0C 78 00 00 00 00 00             //0xc6fcf3 = "QOSS"
00 A3 3C CB  04 10 F0 00 61 93 F3 00 41 00 00 00 //0xcb3ca3 = "RSRC"
00 72 69 CF  04 00 08 00 61 93 F3 00 01 01 00 00 //0xcf6972 = "SVER"

First line:
00 EE EB 86  0E 0C 09 01 00 00 00 00             //0x86ebee = "ANON"
the first 4 bytes are always an encoded label, if you continue that, you get the expected tag names : "ANON","ASRC","CIDS","CNGN","CONF","INST","MINR","NASP","PILD","PLAT","PTAG","QOSS","RSRC","SVER"

Here for compare how me3pse creates this packet:
public static void CreateBootPacket01(Player.PlayerInfo player, Blaze.Packet p)
        {
            List<Blaze.Tdf> Result = new List<Blaze.Tdf>();
            Result.Add(Blaze.TdfInteger.Create("ANON", ConvertHex(Config.FindEntry("ANON"))));
            Result.Add(Blaze.TdfString.Create("ASRC", Config.FindEntry("ASRC")));
            List<string> t = ConvertStringList(Config.FindEntry("CIDS"));
            List<long> t2 = new List<long>();
            foreach (string v in t)
                t2.Add(Convert.ToInt64(v));
            Result.Add(Blaze.TdfList.Create("CIDS", 0, t2.Count, t2));
            Result.Add(Blaze.TdfString.Create("CNGN", ""));
            t = new List<string>();
            List<string> t3 = new List<string>();
            ConvertDoubleStringList(Config.FindEntry("BOOTCONF"),out t,out t3);
            Blaze.TdfDoubleList conf2 = Blaze.TdfDoubleList.Create("CONF", 1, 1, t, t3, t.Count);
            List<Blaze.Tdf> t4 = new List<Blaze.Tdf>();
            t4.Add(conf2);
            Result.Add(Blaze.TdfStruct.Create("CONF", t4));
            Result.Add(Blaze.TdfString.Create("INST", Config.FindEntry("INST")));
            Result.Add(Blaze.TdfInteger.Create("MINR", ConvertHex(Config.FindEntry("MINR"))));
            Result.Add(Blaze.TdfString.Create("NASP", Config.FindEntry("NASP")));
            Result.Add(Blaze.TdfString.Create("PILD", ""));
            Result.Add(Blaze.TdfString.Create("PLAT", Config.FindEntry("PLAT")));
            Result.Add(Blaze.TdfString.Create("PTAG", ""));
            List<Blaze.Tdf> QOSS = new List<Blaze.Tdf>();
            List<Blaze.Tdf> BWPS = new List<Blaze.Tdf>();
            BWPS.Add(Blaze.TdfString.Create("PSA\0", Config.FindEntry("BOOTPSA0")));
            BWPS.Add(Blaze.TdfInteger.Create("PSP\0", ConvertHex(Config.FindEntry("BOOTPSP0"))));
            BWPS.Add(Blaze.TdfString.Create("SNA\0", Config.FindEntry("BOOTSNA0")));
            QOSS.Add(Blaze.TdfStruct.Create("BWPS", BWPS));
            QOSS.Add(Blaze.TdfInteger.Create("LNP\0", ConvertHex(Config.FindEntry("LNP"))));
            List<Blaze.Tdf> LTPS1 = new List<Blaze.Tdf>();            
            LTPS1.Add(Blaze.TdfString.Create("PSA\0", Config.FindEntry("BOOTPSA1")));
            LTPS1.Add(Blaze.TdfInteger.Create("PSP\0", ConvertHex(Config.FindEntry("BOOTPSP1"))));
            LTPS1.Add(Blaze.TdfString.Create("SNA\0", Config.FindEntry("BOOTSNA1")));
            List<Blaze.Tdf> LTPS2 = new List<Blaze.Tdf>();
            LTPS2.Add(Blaze.TdfString.Create("PSA\0", Config.FindEntry("BOOTPSA2")));
            LTPS2.Add(Blaze.TdfInteger.Create("PSP\0", ConvertHex(Config.FindEntry("BOOTPSP2"))));
            LTPS2.Add(Blaze.TdfString.Create("SNA\0", Config.FindEntry("BOOTSNA2")));
            List<Blaze.Tdf> LTPS3 = new List<Blaze.Tdf>();
            LTPS3.Add(Blaze.TdfString.Create("PSA\0", Config.FindEntry("BOOTPSA3")));
            LTPS3.Add(Blaze.TdfInteger.Create("PSP\0", ConvertHex(Config.FindEntry("BOOTPSP3"))));
            LTPS3.Add(Blaze.TdfString.Create("SNA\0", Config.FindEntry("BOOTSNA3")));
            List<Blaze.TdfStruct> LTPS = new List<Blaze.TdfStruct>();
            LTPS.Add(Blaze.CreateStructStub(LTPS1));
            LTPS.Add(Blaze.CreateStructStub(LTPS2));
            LTPS.Add(Blaze.CreateStructStub(LTPS3));
            t = ConvertStringList(Config.FindEntry("LTPS"));
            QOSS.Add(Blaze.TdfDoubleList.Create("LTPS", 1, 3, t, LTPS, 3));
            QOSS.Add(Blaze.TdfInteger.Create("SVID", ConvertHex(Config.FindEntry("SVID"))));
            Result.Add(Blaze.TdfStruct.Create("QOSS", QOSS));
            Result.Add(Blaze.TdfString.Create("RSRC", Config.FindEntry("RSRC")));
            Result.Add(Blaze.TdfString.Create("SVER", Config.FindEntry("SVER")));
            SendPacket(player, Blaze.CreatePacket(p.Component, p.Command, 0, 0x1000, p.ID, Result));
        }


6. this is how you find the taginfomap getter function: find the "getClassName" getter via string search, goto xref, 3 entries lower is the taginfomapfunction

   