      -to bypass ssl certification check and so the backend can use a faked cert, zlib.dll was chosen to inject code to bypass it - so the dll with the bypass has to be called "zlib.dll" (so it gets loaded instead) and the original dll has to be renamed to "zlib_org.dll" (so the proxy dll can translate calls to it back and forth) - you can control the game exe from the webbrowser, from within memory via zlib.dll or by settings in blaze packets - blaze is an older(but always updated) protocol which essentially mimics remote procdure calls with a custom binary xml format - blaze does no ingame traffic, like position updates or shots, instead its
for all the "managing"
around a match, the actual game traffic is usually UDP anyway, blaze usaully just tells the participants how to connect to each other

    - blaze packets contain a header and a payload, the header tells which procedure to tell, the payload contains its calling data - the header defines a combination of "component"
and "command", like f.e.
"AuthComponent"
and its member
function "preAuth" - you need to implement all called functions from all used components

    - in order to guess at least the structure you need to find the TdfInfoMaps(see taginfomaps.txt) - in order to guess its content you need to find the actual handler functions(see taginfomaps.txt) - payload has a treelike structure of "fields"
that have a label and data, the data in turn can be f.e.a list of more fields, etc. - the labels are always 4 uppercase letters(including space) and are encoded in 3 bytes(see packetviewer of me3pse
    for converting those, or blazelib code) - 
there are multiple modes to blaze: client to client(p2p, like in me3, someone hosts, someone joins) or client to server(client hosts match on server, server lets other clients join and tells creator) - blaze is meant as "backend"
between either client to client or client to server, which can be different platforms(f.e.server on linux, client on console) and have a normalized way of doing basic tasks like matchmaking and login - EA uses its own SSL implementation called "ProtoSSL" (see download.txt), this can be used to find its functions easier - there is a 2015 and 2010 client, but only a 2010 server, that got leaked, and all my re is done mostly on the 2015e r client alone, the server should behave similar, just asks
for other commands ofc-as for bfp4f theres no live server to watch traffic from, you can make assumption by compare with bf4 and me3 blaze emulator(see download.txt) - the " 127.0.0.1 gosredirector.ea.com"
redirection in hosts file makes the OS
return that IP(localhost) for that URL that the game will use to find EAs servers